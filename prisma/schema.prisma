datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  user
  mod
  admin
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  role           Role             @default(user)
  title          String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  discordAccount DiscordAccount?
  Event          Event[]
  EventImage     EventImage[]
  ThumbnailImage ThumbnailImage[]
  Post           Post[]
}

model DiscordAccount {
  id            String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique
  username      String?
  discriminator String?
  avatar        String?
  access_token  String?   @db.Text
  expires_at    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model BlackList {
  email String @unique
}

model Event {
  id                  String          @id @default(cuid())
  slug                String          @unique
  title               String
  description         String?
  startDate           DateTime
  endDate             DateTime
  location            String?
  capacity            Int?
  registrationEnabled Boolean         @default(false)
  thumbnailImage      ThumbnailImage?
  eventImages         EventImage[]
  author              User?           @relation(fields: [authorId], references: [id])
  authorId            String?
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
}

// Event Images for gallery
model EventImage {
  id         String   @id @default(cuid())
  url        String
  author     User?    @relation(fields: [authorId], references: [id])
  authorId   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
}

// Thumbnail Images for events and posts
model ThumbnailImage {
  id         String   @id @default(cuid())
  url        String
  author     User?    @relation(fields: [authorId], references: [id])
  authorId   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String   @unique
}

// Newsletter Post
model Post {
  id         String   @id @default(cuid())
  title      String
  content    String
  author     User?    @relation(fields: [authorId], references: [id])
  authorId   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
